const blogsData = [
    {
        id: 1,
        updated: false,
        title: '15 Types of Databases and When to Use Them',
        summary: "In this article, we'll explore 15 common types of databases and discuss when to use them, along with examples.",
        author: 'Ashish Pratap Singh',
        date: 'March 24, 2024',
        content: 'Relational Databases (RDBMS)\r\n' +
            'Relational databases structure data into one or more tables of rows and columns, with a unique key identifying each row. Rows in a table can be linked to rows in other tables through foreign keys, establishing a relationship between them.\r\n' +
            '\r\n' +
            'This structure allows relational databases to handle large amounts of structured data, enforce data integrity, and support complex queries and ACID transactions.\r\n' +
            '\r\n' +
            'They use Structured Query Language (SQL) for defining, manipulating, and querying data, making them highly versatile and widely used in various applications.\r\n' +
            '\r\n' +
            'Common Use-cases:\r\n' +
            'Enterprise Applications: For managing customer data, inventory, employee records, and financial transactions, where data integrity and relationships are critical.\r\n' +
            '\r\n' +
            'E-commerce Platforms: Handling product catalogs, customer orders, and payment transactions, requiring complex queries and transaction processing.\r\n' +
            '\r\n' +
            'Banking and Financial Services: Managing accounts, transactions, and user data, where the ACID properties ensure the reliability and consistency of financial operations.\r\n' +
            '\r\n' +
            'Examples: MySQL, PostgreSQL, Oracle Database.\r\n' +
            '\r\n' +
            '2. Key-Value Store\r\n' +
            'Key-value stores are NoSQL databases that store data as key-value pairs providing fast retrieval of values based on unique keys.\r\n' +
            '\r\n' +
            'They are primarily used when the data model is based on key-value pairs and requires high scalability, availability and throughput.\r\n' +
            '\r\n' +
            'However, they may not be the best fit for applications that require complex querying, data relationships, or strong consistency guarantees.\r\n' +
            '\r\n' +
            'Common Use-cases:\r\n' +
            'Session Storage: Storing and managing user session information such as user preferences, shopping carts or authentication tokens in web applications.\r\n' +
            '\r\n' +
            'Caching: Implementing caching mechanisms to improve the performance of web applications by storing frequently accessed data in memory for rapid retrieval.\r\n' +
            '\r\n' +
            'Real-time data processing: Key-value stores can quickly store and retrieve data for real-time analytics, event processing, or message queues.\r\n' +
            '\r\n' +
            'Examples: Redis, DynamoDB.\r\n' +
            '\r\n' +
            '3. Document Databases\r\n' +
            'Document databases, a subset of the broader NoSQL family, are designed to store, manage, and retrieve document-oriented information.\r\n' +
            '\r\n' +
            'These databases handle data in a semi-structured format, typically JSON, XML, or BSON, allowing for a more flexible schema than traditional relational databases.\r\n' +
            '\r\n' +
            'Document databases are particularly useful in scenarios where the data model evolves frequently, and where fast read and write performance is critical.\r\n' +
            '\r\n' +
            'However, they may not be the best fit for highly structured data or complex transactions spanning multiple documents or collections.\r\n' +
            '\r\n' +
            'Common Use-cases:\r\n' +
            'E-commerce Platforms: Storing product catalogs with diverse attributes, user reviews, and inventory data, allowing for flexible representation of product information.\r\n' +
            '\r\n' +
            'Content Management Systems (CMS): Ideal for managing articles, user profiles, and comments, where each piece of content can be stored as a document.\r\n' +
            '\r\n' +
            'Real-Time Analytics and IoT: Handling varied data structures generated by IoT devices and supporting real-time analytics on this data.\r\n' + '\r\n' +
            'Examples: MongoDB, Couchbase, and Apache CouchDB\r\n' +
            '\r\n' +
            '4. Graph Databases\r\n' +
            'Graph databases are a type of NoSQL database that specialize in storing, managing, and querying complex networks of interconnected data.\r\n' +
            '\r\n' +
            'They represent data as graphs, consisting of nodes (entities), edges (relationships between entities), and properties (information associated with nodes and edges).\r\n' +
            '\r\n' +
            'By leveraging the graph structure, graph databases enable efficient traversal, querying, and analysis of interconnected data.\r\n' +
            '\r\n' +
            'They are very useful in applications like social networks and recommendation engines.\r\n' +
            '\r\n' +
            'Common Use-cases:\r\n' +
            'Social Networks: Managing user profiles and their connections, enabling features like friend recommendations and social graph analysis.\r\n'
            +
            '\r\n' +
            'Recommendation Systems: Analyzing customer preferences, product inventories, and purchase histories to generate personalized product or content recommendations.\r\n' +
            '\r\n' +
            'Knowledge Graphs: Building vast repositories of interconnected data for semantic searches, information retrieval, and decision support systems.\r\n' +
            '\r\n' +
            'Examples: Neo4j, Amazon Neptune.\r\n' +
            '\r\n' +
            '5. Wide-Column Stores\r\n' +
            'Wide-Column Stores represent a type of NoSQL database optimized for storing and querying large amounts of data across many machines.\r\n' +
            '\r\n' +
            'They organize data into tables with a flexible and dynamic column structure. They are designed to handle large-scale, distributed data storage and provide high scalability and performance.\r\n' +
            '\r\n' +
            'Their column-oriented architecture, flexible schema, and eventual consistency model make them well-suited for applications that require high write throughput and real-time data processing.\r\n' +
            '\r\n' +
            'However, they may not be the best fit for use cases that require complex joins, strong consistency, or strict ACID transactions.\r\n' +
            '\r\n' +
            'Common Use-Cases:\r\n' +
            'Web analytics and user tracking: Ideal for capturing and analyzing event data in real-time, such as web analytics, user activity logs, and network monitoring.\r\n' +
            '\r\n' +
            'Real-Time Analytics: They can quickly aggregate and analyze data, making them suitable for dashboards, alerting systems, and operational analytics.\r\n' +
            '\r\n' +
            'Examples: Apache Cassandra, Apache HBase, Google Bigtable.\r\n' +
            '\r\n' +
            '6. In-Memory Databases\r\n' +
            'In-Memory Databases store data directly in the main memory (RAM) of the computer, as opposed to disk-based storage.\r\n' +
            '\r\n' +
            'They are designed to provide extremely fast data access and low latency by eliminating the need for disk I/O operations.\r\n' +
            '\r\n' +
            'In-memory databases are particularly well-suited for applications that require real-time processing, high-speed transactions, and low-latency data access such as caching, real-time analytics, high-frequency trading.\r\n' +
            '\r\n' +
            'However, they are costly and the main memory may lack sufficient capacity to store the entire dataset.\r\n' +
            '\r\n' +
            'Common Use-Cases:\r\n' +
            'Online Gaming: To manage user sessions and game state in real time, ensuring fast and responsive gameplay experiences.\r\n' +
            '\r\n' +
            'High-Frequency Trading: They enable a large number of financial transactions per second with minimal latency.\r\n' +
            '\r\n' +
            'Examples: Redis, Memcached.\r\n' +
            '\r\n' +
            '7. Time-Series Databases\r\n' +
            'Time-Series Databases (TSDBs) specialize in storing, retrieving, and managing time-stamped or time-series data.\r\n' +
            '\r\n' +
            'Time-series data is a sequence of data points collected over time intervals.\r\n' +
            '\r\n' +
            'TSDBs are commonly used in applications that generate and process time-series data, such as monitoring systems, sensor networks, financial trading platforms, and IoT (Internet of Things) devices.\r\n' +
            '\r\n' +
            'They provide the necessary performance, scalability, and specialized features to handle the unique characteristics of time-series data.\r\n'
            +
            '\r\n' +
            'Common Use-Cases:\r\n' +
            'Financial Trading Platforms: For tracking stock prices, trade volumes, and market indicators over time, enabling trend analysis and algorithmic trading strategies.\r\n' +
            '\r\n' +
            'IoT and Sensor Data Management: Collecting and analyzing data from sensors and IoT devices, useful in smart homes, industrial automation, and environmental monitoring.\r\n' +
            '\r\n' +
            'Performance Monitoring: In IT and network infrastructure, to monitor system metrics (CPU usage, memory consumption, network traffic) over time, helping in capacity planning and anomaly detection.\r\n' +
            '\r\n' +
            'Examples: InfluxDB, TimescaleDB, Prometheus.\r\n' +
            '\r\n' +
            '8. Object-Oriented Databases\r\n' +
            'Object-oriented databases (OODB) are databases that store and manipulate data as objects.\r\n' +
            '\r\n' +
            'These objects are instances of classes, which can encapsulate both data (attributes) and behaviors (methods), mirroring the structure and concepts of object-oriented programming languages like Java, C++, or Python.\r\n' +
            '\r\n' +
            'OODBs are particularly well-suited for applications where complex data models are necessary, or the application logic heavily relies on object-oriented principles.\r\n' +
            '\r\n' +
            'By allowing developers to work directly with objects in the database, OODBs can simplify the development process and provide a more natural and efficient way to manage complex data structures and relationships.\r\n' +
            '\r\n' +
            'Common Use-Cases:\r\n' +
            'Object-Oriented Applications: Applications developed using OOP languages that require a seamless persistence mechanism for storing and retrieving objects without the need to convert them to a different format (object-relational mapping).\r\n' +
            '\r\n' +
            'Multimedia Databases: Storing, organizing, and retrieving multimedia items like images, videos, and audio files, which can benefit from the encapsulation of both data and behaviors (e.g., methods to play or edit).\r\n' +
            '\r\n' +
            'Examples: ObjectDB, db4o\r\n' +
            '\r\n' +
            '9. Text Search Databases\r\n' +
            'Text Search Databases are specialized systems designed for efficient storage, indexing, and retrieval of large volumes of unstructured or semi-structured text data.\r\n' +
            '\r\n' +
            'They provide fast and scalable search capabilities, enabling users to query and find relevant information from vast collections of documents, web pages, or other text-based content.\r\n' +
            '\r\n' +
            'Common Use-Cases:\r\n' +
            'E-commerce: For product searches within online stores, helping customers find products based on descriptions, reviews, and metadata.\r\n' +
            '\r\n' +
            'Web search: These are used in Search engines like Google, Bing, and DuckDuckGo to index and search the vast amount of content available on the internet, allowing users to find relevant web pages based on their queries.\r\n' +
            '\r\n' +
            'Log analysis: These can be used to index and search large volumes of log data, such as application logs or system logs, for troubleshooting, monitoring, and analytics purposes.\r\n' +
            '\r\n' +
            'Examples: Elasticsearch, Apache Solr, Sphinx.\r\n' +
            '\r\n' +
            '10. Spatial Databases\r\n' +
            'Spatial databases are designed to store, manage, and analyze data that represents geographical or spatial information. They extend traditional database capabilities to handle complex spatial data types, such as points, lines, polygons, and other geometric shapes, along with their associated attributes and relationships.\r\n' +
            '\r\n' +
            'Spatial databases employ efficient indexing'
    },
    {
        id: 2,
        updated: false,
        title: "Demystifying Data Structures and Algorithms with STL: A Programmer's Guide to Effective Problem-Solving",
        summary: 'From Novice to Ninja: My Enthralling Adventure with the Standard Template Library (STL), Data Structures, and Algorithms in Programming',
        author: 'Sagnik Das',
        date: 'July 23, 2023',
        content: 'When it comes to efficiency and versatility, the STL is the silver bullet every programmer needs in their arsenal.\r\n' +
            '\r\n' +
            `Welcome to the exciting realm of Data Structures and Algorithms, or "DSA" for short! If you're curious but a little nervous about exploring this fascinating domain, don't worry, you're not alone. Let me share my experience from my sophomore year of engineering when I first encountered these mysterious concepts. At the beginning of my coding journey, I started with C language, not fully aware of the challenges that lay ahead. Simple arithmetic problems on Leetcode and Codechef were a breeze, but as things got more complex, using arrays became frustrating. That's when I stumbled upon C++ and the Standard Template Library (STL), which turned out to be a game-changer!\r\n` +
            '\r\n' +
            "The STL transformed my approach to problem-solving by introducing me to containers, algorithms, and iterators. Say goodbye to the struggles of dealing with arrays; C++'s vectors offered convenience and versatility that I couldn't resist.\r\n" +
            '\r\n' +
            "However, I want to be honest with you—becoming a master in DSA isn't easy. It requires dedication, consistent practice, and a willingness to tackle challenges head-on. But don't be discouraged! Just like any skill, progress comes with persistent effort and a positive mindset.\r\n" +
            '\r\n' +
            "🌟 Unleashing the Power of STL: A Programmer's Dream Toolkit 🌟\r\n" +
            '\r\n' +
            'Indeed, the Standard Template Library, or STL, is a powerful ally that significantly simplifies programming tasks. This library encompasses a plethora of template classes tailored to offer a wide array of commonly used data structures and functions, such as lists, stacks, and arrays. By design, the STL revolves around container classes, algorithms, and iterators, all of which are parameterized, making it a versatile and generalized toolkit.\r\n' +
            '\r\n' +
            "All these fancy terms, I should make it simpler. In essence, the STL eliminates the need for manual implementation of frequently used data structures like maps, heaps, stacks, and queues. These essential data structures are readily available within the library, enabling seamless integration into our code just like arrays. Comparatively, in C language, one must declare a struct and implement the logic for stack or queue operations individually for each program. Contrastingly, in C++, the STL harnesses classes instead of structs, thereby elevating the organization of related variables and the purpose-defining functions. Consequently, defining and utilizing stacks, for instance, becomes more cohesive and intuitive within C++'s class-oriented approach.\r\n" +
            '\r\n' +
            "Furthermore, the STL's benefits extend beyond convenience. Notably, it facilitates the development of efficient code. A significant number of algorithms and data structures in the STL are optimized, yielding faster execution times compared to custom implementations. This optimization is a notable advantage when it comes to performance-critical applications, streamlining computations and enhancing overall program efficiency.\r\n" +
            '\r\n' +
            "It is worth noting that the STL's seamless support for working with various data types, including user-defined types, is made possible through the implementation of templates, a powerful feature of C++. However, an in-depth exploration of templates is beyond the scope of this blog and merits a dedicated discussion in the future.\r\n" +
            '\r\n' +
            "With the STL at your disposal, tackling complex programming challenges becomes more manageable, as it equips you with a rich set of pre-built tools, enhances code readability, and promotes efficient solutions. Embrace the STL, and you'll unlock a world of possibilities in the realm of Data Structures and Algorithms.\r\n" +
            '\r\n' +
            'Now, you may wonder, what wonders does the STL hold and how can we wield its power efficiently?\r\n' +
            '\r\n' +
            'STL has four components:\r\n' +
            '\r\n' +
            'Algorithms\r\n' +
            '\r\n' +
            'Containers\r\n' +
            '\r\n' +
            'Functors\r\n' +
            '\r\n' +
            'Iterators\r\n' +
            '\r\n' +
            'Throughout my coding journey and particularly in the context of interview preparations, I have frequently relied upon certain algorithms and containers from the STL. In the subsequent sections of this blog, I will delve into these essential elements, providing detailed insights and practical examples to showcase their effective usage.\r\n' +
            '\r\n' +
            'Algorithms\r\n' +
            'The STL houses a wealth of algorithms conveniently accessed through the <algorithm> header file.\r\n' +
            '\r\n' +
            '💡 Quick Tip: Header files are those which we include at the top of our program\r\n' +
            '\r\n' +
            '\r\n' +
            'COPY\r\n' +
            '\r\n' +
            'COPY\r\n' +
            '#include <algorithm>\r\n' +
            '#include <iostream>\r\n' +
            '\r\n' +
            '//These are the header files I am talking about\r\n' +
            'These algorithms work with containers and offer various operations to manipulate their contents. They come optimized, greatly improving time complexity. Some essential algorithms include sort, reverse, accumulate, binary_search, and more. Once you get familiar with their usage patterns, they become powerful tools in your coding toolbox.\r\n' +
            '\r\n' +
            'Why use them? Well, instead of reinventing sorting or other common operations every time you code, a single line does the job:\r\n' +
            '\r\n' +
            'sort (arr.begin(), arr.end());\r\n' +
            '\r\n' +
            "and boom, your array is sorted. Plus, the STL's optimization ensures it's done in O(nlogn) time complexity.\r\n" +
            '\r\n' +
            'These pre-defined algorithms make programming much easier, letting you focus on solving the actual problem rather than getting bogged down in repetitive tasks. To explore more about these algorithms, check out articles from resources like GeeksforGeeks (GFG) for deeper insights.\r\n' +
            '\r\n' +
            'Containers\r\n' +
            'Containers serve as holder objects that store collections of other objects, known as elements. Implemented as class templates, containers offer remarkable flexibility in the types of elements they can hold, eliminating the need for repetitive definitions in your program.\r\n' +
            '\r\n' +
            'STL containers are grouped into four categories, each tailored to specific data structures and purposes:\r\n' +
            '\r\n' + '1. Sequence containers\r\n' +
            'Sequence containers facilitate sequential access to their elements. They encompass various types, including:\r\n' +
            '\r\n' +
            'array: A static contiguous array [Introduced in C++11].\r\n' +
            '\r\n' +
            "vector: A dynamic contiguous array, allowing size changes during the program's execution.\r\n" +
            '\r\n' +
            'deque: A double-ended queue, enabling efficient insertion and deletion at both ends.\r\n' +
            '\r\n' +
            'forward_list: A singly-linked list [Introduced in C++11], suitable for memory-efficient operations.\r\n' +
            '\r\n' +
            'list: A doubly-linked list, optimal for frequent insertions and deletions at any position.\r\n' +
            '\r\n' +
            '💡 Quick Tip: The key distinction between a vector and an array is that vectors have dynamic sizes and hence one can change it at any time during the program. It has functions such as push_back to push elements to the end of the vector, pop_back to remove the last element, erase to delete a particular index, etc. Hence, it becomes more effective and user-friendly than normal arrays.\r\n' +
            '\r\n' +
            '2. Associative containers\r\n' +
            'Associative containers employ sorted data structures that enable rapid searching with a complexity of O(log n).\r\n' +
            '\r\n' +
            "set : A collection of unique keys, sorted by the keys' natural order.\r\n" +
            '\r\n' +
            'map : A collection of key-value pairs, sorted by the keys, with keys being unique.\r\n' +
            '\r\n' +
            'multiset : Similar to set but allows multiple instances of the same key.\r\n' +
            '\r\n' +
            'multimap : Similar to map but allows multiple key-value pairs with the same key.\r\n' +
            '\r\n' +
            '3. Unordered associative containers\r\n' +
            'Unordered associative containers use hashed data structures, allowing fast searching with an average complexity of O(1) and a worst-case complexity of O(n).\r\n' +
            '\r\n' +
            "unordered_set : A collection of unique keys, hashed by the keys' hash values.\r\n" +
            '\r\n' +
            "unordered_map : A collection of key-value pairs, hashed by the keys' hash values, with keys being unique.\r\n" +
            '\r\n' +
            'unordered_multiset : Similar to unordered_set but permits multiple instances of the same key.\r\n' +
            '\r\n' +
            'unordered_multimap : Similar to unordered_map but permits multiple key-value pairs with the same key.\r\n' +
            '\r\n' +
            '4. Container adaptors\r\n' +
            'Container adaptors provide a different interface for sequential containers, enhancing their functionality.\r\n' +
            '\r\n' +
            'stack : Follows the Last In First Out (LIFO) principle, ideal for managing function calls and backtracking.\r\n' +
            '\r\n' +
            'queue : Adheres to the First In First Out (FIFO) principle, suitable for task scheduling and breadth-first search.\r\n' +
            '\r\n' +
            'priority_queue : Specifically designed so that the front element is either the greatest or the smallest among all elements, effectively implementing the Heap data structure.\r\n' +
            '\r\n' +
            "Each container serves a specific purpose, simplifying your program's logic and enhancing user-friendliness. Vectors, in particular, find application in a multitude of scenarios, and I plan to delve deeper into sets and maps, exploring hashing and how they elegantly solve various programming, logic, and design problems in an upcoming article.\r\n" +
            '\r\n' +
            'In conclusion, the Standard Template Library (STL) is a true game-changer for programmers delving into Data Structures and Algorithms. With its versatile template classes, optimized algorithms, and efficient containers, the STL simplifies complex programming tasks and unlocks a wide array of possibilities.\r\n' +
            '\r\n' +
            "Embracing the STL equips us with a rich set of pre-built tools, enhances code readability, and promotes efficient problem-solving. It empowers us to focus on the core of our coding challenges while leaving repetitive tasks to the STL's well-optimized components. As we embark on this exciting journey, let's embrace the power of the STL, stay dedicated to consistent learning, and continue growing as proficient programmers. Happy coding, and may the STL be our trusty companion in our coding endeavours!\r\n" +
            '\r\n' +
            'Stay tuned for more insights on sets, maps, hashing, and their remarkable applications!'
    },
    {
        id: 3,
        updated: false,
        title: 'Why is DNS still hard to learn?',
        summary: 'Troubleshooting DNS issues is challenging due to hidden system complexities, confusing tools, and obscure gotchas, despite DNS itself not being inherently difficult to understand.',
        author: 'Julia Evans',
        date: 'July 21, 2024',
        content: 'I write a lot about technologies that I found hard to learn about. A while back my friend Sumana asked me an interesting question – why are these things so hard to learn about? Why do they seem so mysterious?\r\n' +
            '\r\n' +
            'For example, take DNS. We’ve been using DNS since the 80s (for more than 35 years!). It’s used in every website on the internet. And it’s pretty stable – in a lot of ways, it works the exact same way it did 30 years ago.\r\n' +
            '\r\n' +
            'But it took me YEARS to figure out how to confidently debug DNS issues, and I’ve seen a lot of other programmers struggle with debugging DNS problems as well. So what’s going on?\r\n' +
            '\r\n' +
            'Here are a couple of thoughts about why learning to troubleshoot DNS problems is hard.\r\n' +
            '\r\n' +
            '(I’m not going to explain DNS very much in this post, see Implement DNS in a Weekend or my DNS blog posts for more about how DNS works)\r\n'
            +
            '\r\n' +
            'it’s not because DNS is super hard\r\n' +
            'When I finally learned how to troubleshoot DNS problems, my reaction was “what, that was it???? that’s not that hard!“. I felt a little bit cheated! I could explain to you everything that I found confusing about DNS in a few hours.\r\n' +
            '\r\n' +
            'So – if DNS is not all that complicated, why did it take me so many years to figure out how to troubleshoot pretty basic DNS issues (like “my domain doesn’t resolve even though I’ve set it up correctly” or “dig and my browser have different DNS results, why?“)?\r\n' +
            '\r\n' +
            'And I wasn’t alone in finding DNS hard to learn! I’ve talked to a lot of smart friends who are very experienced programmers about DNS of the years, and many of them either:\r\n' +
            '\r\n' +
            'didn’t feel comfortable making simple DNS changes to their websites\r\n' +
            'or were confused about basic facts about how DNS works (like that records are pulled and not pushed)\r\n' +
            'or did understand DNS basics pretty well, but had the some of the same knowledge gaps that I’d struggled with (negative caching and the details of how dig and your browser do DNS queries differently)\r\n' +
            'So if we’re all struggling with the same things about DNS, what’s going on? Why is it so hard to learn for so many people?\r\n' +
            '\r\n' +
            'Here are some ideas.\r\n' +
            '\r\n' +
            'a lot of the system is hidden\r\n' +
            'When you make a DNS request on your computer, the basic story is:\r\n' +
            '\r\n' +
            'your computer makes a request to a server called resolver\r\n' +
            'the resolver checks its cache, and makes requests to some other servers called authoritative nameservers\r\n' +
            'Here are some things you don’t see:\r\n' +
            '\r\n' +
            'the resolver’s cache. What’s in there?\r\n' +
            'which library code on your computer is making the DNS request (is it libc getaddrinfo? if so, is it the getaddrinfo from glibc, or musl, or apple? is it your browser’s DNS code? is it a different custom DNS implementation?). All of these options behave slightly differently and have different configuration, approaches to caching, available features, etc. For example musl DNS didn’t support TCP until early 2023.\r\n' +
            'the conversation between the resolver and the authoritative nameservers. I think a lot of DNS issues would be SO simple to understand if you could magically get a trace of exactly which authoritative nameservers were queried downstream during your request, and what they said. (like, what if you could run dig +debug google.com and it gave you a bunch of extra debugging information?)\r\n' +
            'dealing with hidden systems\r\n' +
            'A couple of ideas for how to deal with hidden systems\r\n' +
            '\r\n' +
            'just teaching people what the hidden systems are makes a huge difference. For a long time I had no idea that my computer had many different DNS libraries that were used in different situations and I was confused about this for literally years. This is a big part of my approach.\r\n' +
            'with Mess With DNS we tried out this “fishbowl” approach where it shows you some parts of the system (the conversation with the resolver and the authoritative nameserver) that are normally hidden\r\n' +
            'I feel like it would be extremely cool to extend DNS to include a “debugging information” section. (edit: it looks like this already exists! It’s called Extended DNS Errors, or EDE, and tools are slowly adding support for it.\r\n' +
            'Extended DNS Errors seem cool\r\n' +
            'Extended DNS Errors are a new way for DNS servers to provide extra debugging information in DNS response. Here’s an example of what that looks like:\r\n' +
            '\r\n' +
            '$ dig @8.8.8.8 xjwudh.com\r\n' +
            ';; Got answer:\r\n' +
            ';; ->>HEADER<<- opcode: QUERY, status: NXDOMAIN, id: 39830\r\n' +
            ';; flags: qr rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 1, ADDITIONAL: 1\r\n' +
            '\r\n' +
            ';; OPT PSEUDOSECTION:\r\n' +
            '; EDNS: version: 0, flags:; udp: 512\r\n' +
            '; EDE: 12 (NSEC Missing): (Invalid denial of existence of xjwudh.com/a)\r\n' +
            ';; QUESTION SECTION:\r\n' +
            ';xjwudh.com.\t\t\tIN\tA\r\n' +
            '\r\n' +
            ';; AUTHORITY SECTION:\r\n' +
            'com.\t\t\t900\tIN\tSOA\ta.gtld-servers.net. nstld.verisign-grs.com. 1690634120 1800 900 604800 86400\r\n' +
            '\r\n' +
            ';; Query time: 92 msec\r\n' +
            ';; SERVER: 8.8.8.8#53(8.8.8.8) (UDP)\r\n' +
            ';; WHEN: Sat Jul 29 08:35:45 EDT 2023\r\n' +
            ';; MSG SIZE  rcvd: 161\r\n' +
            'Here I’ve requested a nonexistent domain, and I got the extended error EDE: 12 (NSEC Missing): (Invalid denial of existence of xjwudh.com/a). I’m not sure what that means (it’s some DNSSEC Thing), but it’s cool to see an extra debug message like that.\r\n' +
            '\r\n' +
            'I did have to install a newer version of dig to get the above to work.\r\n' +
            '\r\n' +
            'confusing tools\r\n' +
            'Even though a lot of DNS stuff is hidden, there are a lot of ways to figure out what’s going on by using dig.\r\n' +
            '\r\n' +
            'For example, you can use dig +norecurse to figure out if a given DNS resolver has a particular record in its cache. 8.8.8.8 seems to return a SERVFAIL response if the response isn’t cached.\r\n' +
            '\r\n' +
            'here’s what that looks like for google.com\r\n' +
            '\r\n' +
            '$ dig +norecurse  @8.8.8.8 google.com\r\n' +
            ';; Got answer:\r\n' +
            ';; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 11653\r\n' +
            ';; flags: qr ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1\r\n' +
            '\r\n' +
            ';; OPT PSEUDOSECTION:\r\n' +
            '; EDNS: version: 0, flags:; udp: 512\r\n' +
            ';; QUESTION SECTION:\r\n' +
            ';google.com.\t\t\tIN\tA\r\n' +
            '\r\n' +
            ';; ANSWER SECTION:\r\n' +
            'google.com.\t\t21\tIN\tA\t172.217.4.206\r\n' +
            '\r\n' +
            ';; Query time: 57 msec\r\n' +
            ';; SERVER: 8.8.8.8#53(8.8.8.8)\r\n' +
            ';; WHEN: Fri Jul 28 10:50:45 EDT 2023\r\n' +
            ';; MSG SIZE  rcvd: 55\r\n' +
            'and for homestarrunner.com:\r\n' +
            '\r\n' +
            '$ dig +norecurse  @8.8.8.8 homestarrunner.com\r\n' +
            ';; Got answer:\r\n' +
            ';; ->>HEADER<<- opcode: QUERY, status: SERVFAIL, id: 55777\r\n' +
            ';; flags: qr ra; QUERY: 1, ANSWER: 0, AUTHORITY: 0, ADDITIONAL: 1\r\n' +
            '\r\n' +
            ';; OPT PSEUDOSECTION:\r\n' +
            '; EDNS: version: 0, flags:; udp: 512\r\n' +
            ';; QUESTION SECTION:\r\n' +
            ';homestarrunner.com.\t\tIN\tA\r\n' +
            '\r\n' +
            ';; Query time: 52 msec\r\n' +
            ';; SERVER: 8.8.8.8#53(8.8.8.8)\r\n' +
            ';; WHEN: Fri Jul 28 10:51:01 EDT 2023\r\n' +
            ';; MSG SIZE  rcvd: 47\r\n' +
            'Here you can see we got a normal NOERROR response for google.com (which is in 8.8.8.8’s cache) but a SERVFAIL for homestarrunner.com (which isn’t). This doesn’t mean there’s no DNS record homestarrunner.com (there is!), it’s just not cached).\r\n' +
            '\r\n' +
            'But this output is really confusing to read if you’re not used to it! Here are a few things that I think are weird about it:\r\n' +
            '\r\n' +
            'the headings are weird (there’s ->>HEADER<<-, flags:, OPT PSEUDOSECTION:, QUESTION SECTION:, ANSWER SECTION:)\r\n' +
            'the spacing is weird (why is the no newline between OPT PSEUDOSECTION and QUESTION SECTION?)\r\n' +
            'MSG SIZE rcvd: 47 is weird (are there other fields in MSG SIZE other than rcvd? what are they?)\r\n' +
            'it says that there’s 1 record in the ADDITIONAL section but doesn’t show it, you have to somehow magically know that the “OPT PSEUDOSECTION” record is actually in the additional section\r\n' +
            'In general dig’s output has the feeling of a script someone wrote in an adhoc way that grew organically over time and not something that was intentionally designed.\r\n' +
            '\r\n' +
            'dealing with confusing tools\r\n' +
            'some ideas for improving on confusing tools:\r\n' +
            '\r\n' +
            'explain the output. For example I wrote how to use dig explaining how dig’s output works and how to configure it to give you a shorter output by default\r\n' +
            'make new, more friendly tools. For example for DNS there’s dog and doggo and my dns lookup tool. I think these are really cool but personally I don’t use them because sometimes I want to do something a little more advanced (like using +norecurse) and as far as I can tell neither dog nor doggo support +norecurse. I’d rather use 1 tool for everything, so I stick to dig. Replacing the breadth of functionality of dig is a huge undertaking.\r\n' +
            'make dig’s output a little more friendly. If I were better at C programming, I might try to write a dig pull request that adds a +human flag to dig that formats the long form output in a more structured and readable way, maybe something like this:\r\n' +
            '$ dig +human +norecurse  @8.8.8.8 google.com \r\n' +
            'HEADER:\r\n' +
            '  opcode: QUERY\r\n' +
            '  status: NOERROR\r\n' +
            '  id: 11653\r\n' +
            '  flags: qr ra\r\n' +
            '  records: QUESTION: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1\r\n' +
            '\r\n' +
            'QUESTION SECTION:\r\n' +
            '  google.com.\t\t\tIN\tA\r\n' +
            '\r\n' +
            'ANSWER SECTION:\r\n' +
            '  google.com.\t\t21\tIN\tA\t172.217.4.206\r\n' +
            '  \r\n' +
            'ADDITIONAL SECTION:\r\n' +
            '  EDNS: version: 0, flags:; udp: 512\r\n' +
            '\r\n' +
            'EXTRA INFO:\r\n' +
            '  Time: Fri Jul 28 10:51:01 EDT 2023\r\n' +
            '  Elapsed: 52 msec\r\n' +
            '  Server: 8.8.8.8:53\r\n' +
            '  Protocol: UDP\r\n' +
            '  Response size: 47 bytes\r\n' +
            'This makes the structure of the DNS response more clear – there’s the header, the question, the answer, and the additional section.\r\n' +
            '\r\n' +
            'And it’s not “dumbed down” or anything! It’s the exact same information, just formatted in a more structured way. My biggest frustration with alternative DNS tools that they often remove information in the name of clarity. And though there’s definitely a place for those tools, I want to see all the information! I just want it to be presented clearly.\r\n' +
            '\r\n' +
            'We’ve learned a lot about how to design more user friendly command line tools in the last 40 years and I think it would be cool to apply some of that knowledge to some of our older crustier tools.\r\n' +
            '\r\n' +
            'dig +yaml\r\n' +
            'One quick note on dig: newer versions of dig do have a +yaml output format which feels a little clearer to me, though it’s too verbose for my taste (a pretty simple DNS response doesn’t fit on my screen)\r\n' +
            '\r\n' +
            'weird gotchas\r\n' +
            'DNS has some weird stuff that’s relatively common to run into, but pretty hard to learn about if nobody tells you what’s going on. A few examples (there are more in some ways DNS can break:\r\n' +
            '\r\n' +
            'negative caching!'
    },
    {
        id: 4,
        updated: false,
        title: 'What are Checksums?',
        summary: "In this article, we'll explore checksums, how they work, different types, and their real world applications.",
        author: 'Ashish Pratap Singh',
        date: 'May 26, 2024',
        content: "Imagine you're sending an important letter to your friend through the mail.\r\n" +
            '\r\n' +
            'Before sealing the envelope, you take a photo of the letter.\r\n' +
            '\r\n' +
            'When your friend receives it, they take a photo of the letter and send it back to you.\r\n' +
            '\r\n' +
            "If the two photos match, you know the letter hasn't been tampered with or damaged during transit.\r\n" +
            '\r\n' +
            "If they don't match, it's a clear sign something went wrong along the way—perhaps the letter was altered, or part of it was lost or damaged.\r\n" +
            '\r\n' +
            'In the digital world, checksums serve a similar purpose as those photos.\r\n' +
            '\r\n' +
            'Just like taking photos help us answer the question: “Has the letter been altered or damaged“, a checksum answers the question: "Has this data been altered unintentionally or maliciously since it was created, stored, or transmitted?"\r\n' +
            "In this article, we'll explore checksums, how they work, different types, and their real world applications.\r\n" +
            '\r\n' +
            'What is a Checksum?\r\n' +
            "A checksum is a unique fingerprint attached to the data before it's transmitted. When the data arrives at the recipient's end, the fingerprint is recalculated to ensure it matches the original one.\r\n" +
            '\r\n' +
            "If the checksum of a piece of data matches the expected value, you can be confident that the data hasn't been modified or damaged.\r\n" +
            '\r\n' +
            'Checksums are calculated by performing a mathematical operation on the data, such as adding up all the bytes or running it through a cryptographic hash function.\r\n' +
            '\r\n' +
            'How Does a Checksum Work?\r\n' +
            'The process of using a checksum for error detection is straightforward:\r\n' +
            '\r\n' +
            'Calculation: Before sending or storing data, the original data is processed through a specific algorithm to produce a checksum value.\r\n' +
            '\r\n' +
            'Transmission/Storage: The checksum is appended to the data and sent over the network or saved in storage.\r\n' +
            '\r\n' +
            'Verification: Upon retrieval or reception, the checksum is recalculated using the same algorithm on the received data. This newly calculated checksum is compared with the original checksum.\r\n' +
            '\r\n' +
            'Error Detection: If the two checksum values match, the data is considered intact. If they do not match, it indicates that the data has been altered or corrupted during transmission or storage.\r\n' +
            '\r\n' +
            'Types of Checksums\r\n' +
            'There are several types of checksums, each with its own strengths and weaknesses. Here are a few of the most common:\r\n' +
            '\r\n' +
            'Parity Bit: A parity bit is a single bit that is added to a group of bits to make the total number of 1s either even (even parity) or odd (odd parity). While it can detect single bit errors, it fails if an even number of bits are flipped.\r\n' +
            '\r\n' +
            'CRC (Cyclic Redundancy Check): It works by treating the data as a large binary number and dividing it by a predetermined divisor. The remainder of this division becomes the checksum. CRCs are designed to detect common errors caused by noise in transmission channels.\r\n' +
            '\r\n' +
            'Cryptographic Hash Functions: These are one-way functions that generate a fixed-size hash value from the data. Popular examples include MD5, SHA-1, and SHA-256.\r\n' +
            '\r\n' +
            'Real-World Applications of Checksums\r\n' +
            '\r\n' +
            'File downloads: Checksums verify that downloaded files are complete and uncorrupted.\r\n' +
            '\r\n' +
            'Data backups: Checksums ensure that backed-up data is accurate and trustworthy.\r\n' +
            '\r\n' +
            'Network communication: Checksums guarantee that data packets are transmitted correctly, preventing errors and corruption.\r\n' +
            '\r\n' +
            'To summarize, checksums serve as a vital line of defense, safeguarding against errors and corruption.\r\n' +
            '\r\n' +
            'From file downloads and data storage to network transmissions and software installations, checksums work tirelessly to detect errors, prevent corruption, and give us confidence in the accuracy of our digital information.\r\n' +
            '\r\n' +
            'Thank you so much for reading.\r\n' +
            '\r\n' +
            'If you found it valuable, hit a like ❤️ and consider subscribing for more such content every week.\r\n' +
            '\r\n' +
            'If you have any questions or suggestions, leave a comment.\r\n' +
            '\r\n' +
            'This post is public so feel free to share it.\r\n' +
            '\r\n' +
            'Share\r\n' +
            '\r\n' +
            'Checkout my Youtube channel for more in-depth content.\r\n' +
            '\r\n' +
            'Follow me on LinkedIn and X to stay updated.\r\n' +
            '\r\n' +
            'Checkout my GitHub repositories for free interview preparation resources.\r\n' +
            '\r\n' +
            'I hope you have a lovely day!\r\n' +
            '\r\n' +
            'See you soon,\r\n' +
            '\r\n' +
            'Ashish'
    },
    {
        id: 5,
        updated: false,
        title: 'What’s the Difference Between RPC and REST?',
        summary: 'RPC and REST, how are they different and their importance',
        author: 'AWS Blogs',
        date: 'June 17, 2022',
        content: "What's the difference between RPC and REST?\r\n" +
            'Remote Procedure Call (RPC) and REST are two architectural styles in API design. APIs are mechanisms that enable two software components to communicate with each other using a set of definitions and protocols. Software developers use previously developed or third-party components to perform functions, so they don’t have to write everything from scratch. RPC APIs allow developers to call remote functions in external servers as if they were local to their software. For example, you can add chat functionality to your application by remotely calling messaging functions on another chat application. In contrast, REST APIs allow you to perform specific data operations on a remote server. For example, your application could insert or modify employee data on a remote server by using REST APIs.\r\n' +
            '\r\n' +
            'Read about APIs »\r\n' +
            '\r\n' +
            'Read about RESTful APIs »\r\n' +
            '\r\n' +
            'What are the similarities between RPC and REST?\r\n' +
            'Remote Procedure Call (RPC) and REST are both ways to design APIs. APIs are essential in modern web design and other distributed systems. They allow two separate, distributed applications or services to communicate without knowing the internals of how the other one works. These two applications or services may have little to do with one another except for a small data exchange. \r\n' +
            '\r\n' +
            'APIs are also a common mechanism for the backend of a program (the logic component) to communicate with the frontend of a program (the display component). When you design web pages and web applications with APIs instead of tightly coupled integration, you ensure they can scale and change with less code rewriting.\r\n' +
            '\r\n' +
            'Next, we discuss other similarities between RPC and REST APIs.\r\n' +
            '\r\n' +
            'Abstraction\r\n' +
            'While network communications are the main aim of APIs, the lower-level communications themselves are abstracted away from API developers. This allows developers to focus on function rather than technical implementation.\r\n' +
            '\r\n' +
            'Communication\r\n' +
            'Both REST and RPC use HTTP as the underlying protocol. The most popular message formats in RPC and REST are JSON and XML. JSON is favored due to its readability and flexibility.\r\n' +
            '\r\n' +
            'Cross-language compatibility\r\n' +
            'Developers can implement a RESTful or RPC API in any language they choose. So long as the network communication element of the API conforms with the RESTful or RPC interface standard, you can write the rest of the code in any programming language.\r\n' +
            '\r\n' +
            'Architecture principles: RPC vs. REST\r\n' +
            'In Remote Procedure Call (RPC), the client makes a remote function (also known as method or procedure) call on a server. Typically, one or more data values are passed to the server during the call.\r\n' +
            '\r\n' +
            'In contrast, the REST client requests the server to perform an action on a specific server resource. Actions are limited to create, read, update, and delete (CRUD) only and are conveyed as HTTP verbs or HTTP methods.\r\n' +
            '\r\n' +
            'RPC focuses on functions or actions, while REST focuses on resources or objects.\r\n' +
            '\r\n' +
            'RPC principles\r\n' +
            'Next, we discuss some principles that RPC systems typically follow. However, these principles are not standardized like REST.\r\n' +
            '\r\n' +
            'Remote invocation\r\n' +
            'An RPC call is made by a client to a function on the remote server as if it were called locally to the client.\r\n' +
            '\r\n' +
            'Passing parameters\r\n' +
            'The client typically sends parameters to a server function, much the same as a local function.\r\n' +
            '\r\n' +
            'Stubs\r\n' +
            'Function stubs exist on both the client and the server. On the client side, it makes the function call. On the server, it invokes the actual function.\r\n' +
            '\r\n' +
            'REST principles\r\n' +
            'REST principles are standardized. A REST API must follow these principles to be classified as RESTful.\r\n' +
            '\r\n' +
            'Client-server\r\n' +
            'The client-server architecture of REST decouples clients and servers. It treats them each as independent systems.\r\n' +
            '\r\n' +
            'Stateless\r\n' +
            'The server keeps no record of the state of the client between client requests.\r\n' +
            '\r\n' +
            'Cacheable \r\n' +
            'The client or intermediary systems may cache server responses based on whether a client specifies that the response may be cached.\r\n' +
            '\r\n' +
            'Layered system\r\n' +
            'Intermediaries can exist between the client and the server. Both client and server have no knowledge of them and operate as if they were directly connected.\r\n' +
            '\r\n' +
            'Uniform interface\r\n' +
            'The client and server communicate via a standardized set of instructions and messaging formats with the REST API. Resources are identified by their URL, and this URL is known as a REST API endpoint.\r\n' +
            '\r\n' +
            'How they work: RPC vs. REST\r\n' +
            'In Remote Procedure Call (RPC), the client uses HTTP POST to call a specific function by name. Client-side developers must know the function name and parameters in advance for RPC to work.\r\n' +
            '\r\n' +
            "In REST, clients and servers use HTTP verbs like GET, POST, PATCH, PUT, DELETE, and OPTIONS to perform options. Developers only need to know the server resource URLs and don't have to be concerned with individual function names."
    },
    {
        id: 6,
        updated: false,
        title: 'SQL vs NoSQL',
        summary: '5 Critical Differences',
        author: 'Mark SmallCombe',
        date: 'February 15, 2024',
        content: 'When choosing a modern database, one of the biggest decisions is picking a relational (SQL) or non-relational (NoSQL) data structure. Both systems offer unique advantages and cater to different needs, making the choice between them crucial for optimal data management. \r\n' +
            '\r\n' +
            'SQL, or Structured Query Language, is a programming language with a traditional approach that allows relational databases that model predefined schemas to manage structured data like rows and tables. On the other hand, NoSQL, which stands for "Not Only SQL," offers a more flexible, non-relational approach, ideal for handling unstructured or dynamic data. As businesses evolve and data becomes increasingly diverse, understanding the core differences between SQL and NoSQL is important.\r\n' +
            '\r\n' +
            'Here, we break down the most important distinctions and discuss the best SQL and NoSQL database systems available.\r\n' +
            '\r\n' +
            'The five critical differences between SQL and NoSQL are:\r\n' +
            '\r\n' +
            'SQL databases are relational, and NoSQL databases are non-relational.\r\n' +
            'SQL databases use structured query language (SQL) and have a predefined schema. NoSQL databases have dynamic schemas for unstructured data.\r\n' +
            'SQL databases are vertically scalable, while NoSQL databases are horizontally scalable.\r\n' +
            'SQL databases are table-based, while NoSQL databases are document, key-value, graph, or wide-column stores.\r\n' +
            'SQL databases are better for multi-row transactions, while NoSQL is better for unstructured data like documents or JSON.\r\n' +
            'Table of Contents\r\n' +
            '\r\n' +
            'Comparison of SQL vs NoSQL\r\n' +
            'Database Architecture\r\n' +
            'Database Schemas and Query Languages \r\n' +
            'Database Scaling \r\n' +
            'Data Structure\r\n' +
            'Use Cases\r\n' +
            'When to use SQL vs NoSQL\r\n' +
            '\r\n' +
            'Introduction\r\n' +
            'What is SQL?\r\n' +
            'SQL is a domain-specific language used to query and manage data. It works by allowing users to query, insert, delete, and update records in relational databases. SQL also allows for complex logic to be applied through the use of transactions and embedded procedures such as stored functions or views.\r\n' +
            '\r\n' +
            'What is NoSQL?\r\n' +
            'NoSQL stands for Not only SQL. It is a type of database that uses non-relational data structures, such as documents, graph databases, and key-value stores to store and retrieve data. NoSQL systems are designed to be more flexible than traditional relational databases and can scale up or down easily to accommodate changes in usage or load. This makes them ideal for use in applications\r\n' +
            '\r\n' +
            'Why NoSQL is Used Over SQL\r\n' +
            'NoSQL is preferred over SQL in many cases because it offers more flexibility and scalability. The primary benefit of using a NoSQL system is that it provides developers with the ability to store and access data quickly and easily, without the overhead of a traditional relational database. As a result, development teams can focus on delivering features and core business logic faster, without worrying about the underlying data storage implementation. \r\n' +
            '\r\n' +
            'Which is better SQL or NoSQL?\r\n' +
            "The decision of which type of database to use - SQL or NoSQL - will depend on the particular needs and requirements of the project. For example, if you need a fast, scalable, and reliable database for web applications then a NoSQL system may be preferable. On the other hand, if your application requires complex data queries and transactional support then an SQL system may be the better choice. Ultimately, there is no one-size-fits-all solution - it all comes down to what you need from your database and which type of system can provide that in the most efficient manner. It's best to research both options thoroughly before making a decision. \r\n" +
            '\r\n' +
            'Below, learn in-depth about the most important distinctions between SQL vs NoSQL databases and the best systems available on the market.\r\n' +
            '\r\n' +
            '\r\n' +
            'Comparison of SQL vs NoSQL\r\n' +
            "With a basic understanding of what SQL vs NoSQL is, let's take a look at this quick comparison chart to see what sets the two apart:\r\n" +
            '\r\n' +
            'thumbnail image\r\n' +
            '\r\n' +
            "Now that you understand the fundamentals, let's explore five key differences between SQL and NoSQL databases that can help you decide which technology best suits your data storage needs.\r\n" +
            '\r\n' +
            'Database Architecture\r\n' +
            'At the most basic level, the biggest difference between these two technologies is that SQL databases are relational, while NoSQL databases are non-relational. \r\n' +
            '\r\n' +
            'What are Relational Databases?\r\n' +
            'Relational databases use Structured Query Language (SQL) to store and retrieve data. \r\n' +
            '\r\n' +
            'Relational databases (also called relational database management systems or RDBMSs) store data in rows and tables. These systems connect information from various tables with keys — unique identifiers that the database assigns to rows of data in tables. Primary keys and foreign keys facilitate this process. \r\n' +
            'What are Non-Relational Databases (NoSQL)?\r\n' +
            'Non-relational, or NoSQL databases are more flexible and don’t necessarily require the same rigid structure as SQL. \r\n' +
            '\r\n' +
            "Non-relational databases store data just like relational databases. However, they don't contain any rows, tables, or keys. This type of database utilizes a storage model based on the type of data it stores. \r\n" +
            'Read more: Which Modern Database is Right for Your Use Case?\r\n' +
            '\r\n' +
            '\r\n' +
            'Database Schemas and Query Languages \r\n' +
            'SQL databases use structured query language and have a pre-defined schema for defining and manipulating data. SQL is one of the most versatile and widely used query languages available, making it a safe choice for many use cases. It’s perfect for complex queries. However, SQL can be too restrictive. You have to use predefined schemas to determine your data structure before you can work with it. All of your data must follow the same structure, and this process requires significant upfront preparation. If you ever need to change your data structure, it would be difficult and disruptive to your whole system. \r\n' +
            '\r\n' +
            'NoSQL databases have dynamic schemas for unstructured data and store data in many ways. You can use column-oriented, document-oriented, graph-based, or KeyValue stores for your data. This flexibility means that: \r\n' +
            '\r\n' +
            'You can create documents without having to first define their structure.\r\n' +
            'Each document can have its own unique structure.\r\n' +
            'The syntax can vary from database to database.\r\n' +
            'You can add fields as you go.\r\n' +
            '\r\n' +
            'Database Scaling \r\n' +
            'Another difference between SQL vs NoSQL databases is scaling. SQL databases are vertically scalable in most situations. That means you can increase the load on a single server by adding more CPU, RAM, or SSD capacity. \r\n' +
            '\r\n' +
            "NoSQL databases are horizontally scalable. You can handle higher traffic via a process called sharding, which adds more servers to your NoSQL database. Horizontal scaling has a greater overall capacity than vertical scaling, making NoSQL databases the preferred choice for large and frequently changing data sets. For example, you might use a NoSQL database if you have large data objects like images and videos. An SQL database wouldn't be able to handle these objects as effectively, making it difficult to fulfill your data requirements. \r\n" +
            '\r\n' +
            '\r\n' +
            'Data Structure\r\n' +
            'SQL databases are table-based, where each field in a data record has the same name as a table column. This proves beneficial when performing multiple data transformations. \r\n' +
            '\r\n' +
            'NoSQL databases are document, key-value, graph, or wide-column stores. These flexible data models make NoSQL databases easier for some developers to use. \r\n' +
            '\r\n' +
            '\r\n' +
            'Use Cases\r\n' +
            'SQL databases are better for multi-row transactions, while NoSQL is better for unstructured data like documents or JSON. SQL databases are also commonly used for legacy systems built around a relational structure. \r\n' +
            '\r\n' +
            'You might use an SQL database for user-oriented applications with several join operations. SQL schema will help you establish ACID properties and improve data compatibility. These databases are also useful when quickly finding the data you need to complete a task.\r\n' +
            '\r\n' +
            "You might use a NoSQL database for applications with dynamic data without join operations. NoSQL is also better suited for applications with missing data sets that won't impact business efficiency.\r\n" +
            '\r\n' +
            'Some examples of SQL databases include MySQL, Oracle, PostgreSQL, and Microsoft SQL Server. NoSQL database examples include MongoDB, BigTable, Redis, Cassandra, HBase, Neo4j, and CouchDB.\r\n' +
            '\r\n' +
            '\r\n' +
            'When to use SQL vs NoSQL\r\n' +
            "It really comes down to the type of application you are building and the data requirements it entails. Understanding each database's unique features will help you decide which one is best for your project. It is also important to consider scalability and performance when making a decision on whether to use SQL or NoSQL. Knowing which database fits your needs can improve performance, ensure data integrity, and ultimately help you create a successful application.\r\n" +
            '\r\n' +
            'In general, SQL databases are suitable for structured data, where data is consistent, and relationships between tables are well-defined. In contrast, NoSQL databases are suitable for semi-structured or unstructured data, where the data does not conform to a predefined schema, and relationships between data elements are not well-defined. SQL databases are typically used in applications that require complex queries and transaction management, whereas NoSQL databases are used in applications that require high performance and scalability, such as web applications and mobile apps.\r\n' +
            '\r\n' +
            'Now that you know the key differences between SQL vs NoSQL databases, it’s time to explore the different options available for your workloads.\r\n' +
            '\r\n' +
            '\r\n' +
            'SQL Database Systems\r\n' +
            'Here are some of the most popular SQL database systems:\r\n' +
            '\r\n' +
            'MySQL\r\n' +
            'Free and open-source \r\n' +
            'An extremely established database with a huge community, extensive testing, and lots of stability\r\n' +
            'Supports all major platforms\r\n' +
            'Replication and sharding are available\r\n' +
            'Covers a wide range of use cases \r\n' +
            'Oracle\r\n' +
            'Commercial database with frequent updates, professional management, and excellent customer support\r\n' +
            'Procedural Language/SQL or PL/SQL is the SQL dialect used \r\n' +
            'One of the most expensive database solutions'
    },
    {
        id: 7,
        updated: false,
        title: 'Consensus in Distributed System',
        summary: 'Consensus in distributed systems is crucial for ensuring all nodes agree on a single data value, despite challenges like network failures and node crashes.',
        author: 'Sourajit Bhattacharjee',
        date: 'January 23, 2023',
        content: 'Sahil: Hi Sourajit! Let’s play something.\r\n' +
            '\r\n' +
            'Sourajit: Let’s play football.\r\n' +
            '\r\n' +
            'Sahil: Yeah sure! We both love to play that.\r\n' +
            '\r\n' +
            'Both Sahil and Sourajit wanted to play a game and Sourajit suggested playing football. Sahil agreed with Sourajit’s proposal. So, they agreed upon a common value suggested by one of them and took action on that. This agreement on common value is known as consensus.\r\n' +
            '\r\n' +
            'What is Consensus in Distributed System?\r\n' +
            'In a distributed system, multiple computers (known as nodes) are mutually connected with each other and collaborate with each other through message passing. Now, during computation, they need to agree upon a common value to coordinate among multiple processes. This phenomenon is known as Distributed Consensus.\r\n' +
            '\r\n' +
            '\r\n' +
            'Source: https://www.preethikasireddy.com/post/lets-take-a-crack-at-understanding-distributed-consensus\r\n' +
            '\r\n' +
            'Source: https://www.preethikasireddy.com/post/lets-take-a-crack-at-understanding-distributed-consensus\r\n' +
            '\r\n' +
            'Source: https://www.preethikasireddy.com/post/lets-take-a-crack-at-understanding-distributed-consensus\r\n' +
            '\r\n' +
            'Source: https://www.preethikasireddy.com/post/lets-take-a-crack-at-understanding-distributed-consensus\r\n' +
            'Why is Consensus required?\r\n' +
            'In a distributed system, it may happen that multiple nodes are processing large computations distributedly and they need to know the results of each node to keep them updated about the whole system. In such a situation, the nodes need to agree upon a common value. This is where the requirement for consensus comes into the picture.\r\n' +
            '\r\n' +
            'How to achieve Consensus in Distributed System\r\n' +
            'Let’s consider a distributed system, where n nodes are connected with each other. one node sends a message to all other nodes saying “Guys! I chose value v do you all agree?”.\r\n' +
            '\r\n' +
            'Now, two scenarios can come up.\r\n' +
            '\r\n' +
            'All agreed-upon values v\r\n' +
            'Some of them disagree\r\n' +
            'Case 1: All the nodes can carry out their task keeping v as the value in their mind.\r\n' +
            '\r\n' +
            'Case 2: Suppose one of the nodes suggests “I prefer value w”. In this type of situation achieving consensus is complicated.\r\n' +
            '\r\n' +
            'To achieve consensus all the nodes in distributed system should follow the same protocol when communicating. There are three basic conditions that need to be satisfied by the system for consensus algorithms.\r\n' +
            '\r\n' +
            'Agreement: All non-faulty nodes should agree on the same value.\r\n' +
            'Validity: If a system has decided on a value v then that value should be suggested by one of the non-faulty nodes of the system and all other non-faulty nodes must decide that value v.\r\n' +
            'Termination: Every non-faulty node should agree upon some value. If one of the non-faulty nodes agrees upon value v, consensus can not be achieved.\r\n' +
            'Non-faulty node means, node which is not crashed or attacked or malfunctioning.\r\n' +
            '\r\n' +
            'Challenges in Distributed Consensus\r\n' +
            'A distributed system can face mainly two types of failure.\r\n' +
            '\r\n' +
            'Crash failure\r\n' +
            'Byzantine failure\r\n' +
            'Crash failure occurs when a node is not responding to other nodes of the system due to some hardware or software or network fault. This is a very common issue in distributed systems and it can be handled easily by simply ignoring the node’s existence.\r\n' +
            '\r\n' +
            '\r\n' +
            'Crash Failure\r\n' +
            'Byzantine failure is a situation where one or more node is not crashed but behaves abnormally and forward a different message to different peers, due to an internal or external attack on that node. Handling this kind of situation is complicated in the distributed system.\r\n' +
            '\r\n' +
            '\r\n' +
            'Byzantine Failure: faulty node sending different messages to different peers\r\n' +
            'A consensus algorithm, if it can handle Byzantine failure can handle any type of consensus problem in a distributed system.\r\n' +
            '\r\n' +
            'Consensus Algorithms\r\n' +
            'Voting-based Consensus Algorithms\r\n' +
            'Some of the first implementations of consensus algorithms began to employ various voting-based techniques. These have enough fault tolerance and sufficient mathematical proof to assure security and stability. However, because of their democratic character, these algorithms are extremely slow and inefficient, especially as the network becomes larger.\r\n' +
            '\r\n' +
            'Practical Byzantine Fault Tolerance\r\n' +
            'Let’s understand Practical Byzantine Fault Tolerance (pBFT) through an example.\r\n' +
            '\r\n' +
            'Imagine that several divisions of the Byzantine army are camped outside an enemy city, each division commanded by its own general.\r\n' +
            '\r\n' +
            'The generals can communicate with one another only by messenger. After observing the enemy, they must decide upon a common plan of action.\r\n' +
            '\r\n' +
            'However, some of the generals may be traitors, trying to prevent the loyal generals from reaching an agreement. The generals must decide on when to attack the city, but they need a strong majority of their army to attack at the same time.\r\n' +
            '\r\n' +
            'The generals must have an algorithm to guarantee that (a) all loyal generals decide upon the same plan of action, and (b) a small number of traitors cannot cause the loyal generals to adopt a bad plan.\r\n' +
            '\r\n' +
            'The loyal generals will all do what the algorithm says they should, but the traitors may do anything they wish. The algorithm must guarantee condition (a) regardless of what the traitors do. The loyal generals should not only reach an agreement but should agree upon a reasonable plan.\r\n' +
            '\r\n' +
            'Father of Distributed Systems Leslie Lamport proved that —\r\n' +
            '\r\n' +
            'If more than two-thirds of all nodes in a system are honest then consensus can be reached.\r\n' +
            '\r\n' +
            'This algorithm works on the above-mentioned principle. The distributed system is divided into three phases (pre-prepare, prepare, commit) and nodes are sequentially ordered with one node being the Primary node (or leader node) and others as the Secondary node (or backup node). The objective is that all non-faulty nodes help in achieving a consensus regarding the state of the system using the majority rule.\r\n' +
            '\r\n' +
            'pBFT consensus rounds are —\r\n' +
            '\r\n' +
            'The client sends a request to the primary node.\r\n' +
            'The primary nodes broadcast the request to all secondary nodes.\r\n' +
            'All the nodes perform the service that is requested and send it to the client as a reply.\r\n' +
            'The request is served successfully when the client received a similar message from at least two-thirds of the total nodes.\r\n' +
            'The primary node is replaced in every consecutive round using the view change protocol if a predetermined amount of time passes without the leading node broadcasting a request to the backup (secondary) nodes.\r\n' +
            '\r\n' +
            '2. Other Notable Algorithms\r\n' +
            '\r\n' +
            'There are other voting-based consensus algorithms like —\r\n' +
            '\r\n' +
            'HotStuff\r\n' +
            'Paxos\r\n' +
            'Raft etc…'
    },
    {
        id: 8,
        updated: false,
        title: 'Unlocking the Potential: A Guide to Circle’s Programmable Wallets and USDC',
        summary: 'Circle Web3 Services introduces Programmable Wallets, revolutionizing digital wallets with custom automation and smart contract capabilities, while leveraging USDC for stable, scalable blockchain solutions.',
        author: 'Sanjay75000',
        date: 'April 28, 2024',
        content: 'Introduction to Circle Web3 Services & Programmable Wallets\r\n' +
            '\r\n' +
            'Circle Web3 Services, a product of Circle, stands as a significant advancement in blockchain technology, catering to developers and enterprises seeking to harness the potential of decentralized finance. Central to this innovation are Programmable Wallets, which redefine conventional digital wallet functionality, enabling automated actions and seamless integration of smart contract capabilities. With Circle’s Web3 Services, developers gain access to a versatile platform for crafting tailored solutions to diverse industry needs. This forward-thinking approach not only elevates the functionality of digital wallets but also facilitates the development of scalable, interoperable blockchain applications, leveraging the stability and liquidity of USDC.\r\n' +
            '\r\n' +
            'What are Programmable Wallets?\r\n' +
            'Programmable Wallets are a revolutionary concept in the realm of digital wallets. Traditional wallets are limited in functionality, often serving as mere storage containers for digital assets. However, Programmable Wallets take this a step further by allowing developers to build custom functionalities and automate actions directly within the wallet itself.\r\n' +
            '\r\n' +
            'With Programmable Wallets, developers can integrate smart contract functionality, automate transactions, and even create customized financial instruments. This opens up a world of possibilities for decentralized applications (DApps), enabling innovative solutions across various industries.\r\n' +
            '\r\n' +
            'The Benefits of Circle’s Programmable Wallets\r\n' +
            'Circle’s Programmable Wallets offer several key benefits:\r\n' +
            '\r\n' +
            'Customization: Developers have the flexibility to tailor wallets to specific use cases, enabling the creation of highly specialized applications.\r\n' +
            'Automation: Programmable Wallets can execute predefined actions automatically based on specified conditions, streamlining processes and reducing manual intervention.\r\n' +
            'Interoperability: Circle’s Programmable Wallets are built on open standards, allowing for seamless integration with other blockchain protocols and applications.\r\n' +
            'Scalability: By leveraging the stability and liquidity of USDC (USD Coin), Circle’s Programmable Wallets provide a stable foundation for scaling real-world solutions on the blockchain.\r\n' +
            'How USDC and Programmable Wallets can help scale real-world solutions\r\n' +
            '\r\n' +
            'USDC, a stablecoin pegged to the US dollar, plays a crucial role in Circle’s Programmable Wallet ecosystem. Its stability and liquidity make it an ideal medium of exchange and store of value within decentralized applications. By integrating USDC into Programmable Wallets, developers can create scalable solutions for a wide range of use cases, including cross-border payments, remittances, decentralized finance (DeFi), and more.\r\n' + '\r\n' +
            'Moreover, the programmability of Circle’s wallets enables innovative financial products and services to be built on top of the USDC infrastructure, further expanding the possibilities for mainstream adoption of blockchain technology.\r\n' +
            '\r\n' +
            'Step-by-Step Guide to Getting Started with Circle’s Programmable Wallets\r\n' +
            '\r\n' +
            'Create a New User: To create a new user, you can utilize Circle’s API or SDK. Below is an example code snippet using the SDK approach in Python\r\n' +
            'from circle_sdk import Circle\r\n' +
            '\r\n' +
            '# Initialize Circle SDK with API key\r\n' +
            "circle = Circle(api_key='your_api_key')\r\n" +
            '# Create a new user\r\n' +
            'new_user = circle.create_user()\r\n' +
            '2. Acquire Session Token: Once the user is created, you need to generate a session token for authentication. Here’s how you can do it using the API approach in JavaScript\r\n' +
            '\r\n' +
            "const circle = require('circle-api');\r\n" +
            '\r\n' +
            '// Initialize Circle API with authentication credentials\r\n' +
            'const client = new circle.Client({\r\n' +
            "  apiKey: 'your_api_key',\r\n" +
            '});\r\n' +
            '\r\n' +
            '// Generate session token\r\n' +
            'const sessionToken = await client.getSessionToken();\r\n' +
            '3. Initialize the User: After acquiring the session token, you can initialize the user. Below is an example using the SDK approach in Python\r\n' +
            '\r\n' +
            '# Initialize user with session token\r\n' +
            "initialized_user = circle.init_user(session_token='your_session_token', user_id='user_id_from_previous_step')\r\n" +
            '4. Initiate a Transfer: To initiate a wallet-to-wallet transfer, you can use Circle’s transfer functionality. Here’s how you can do it using the API approach in Python.\r\n' +
            '\r\n' +
            '// Initiate transfer\r\n' +
            'const transfer = await client.transfer({\r\n' +
            "  amount: '10',\r\n" +
            "  currency: 'USD',\r\n" +
            "  destination: 'recipient_wallet_address',\r\n" +
            '});\r\n' +
            '5. View Wallet Balance: Finally, you can view the latest wallet balance after the transfer. Below is an example using the SDK approach in Python.\r\n' +
            '\r\n' +
            '# Get wallet balance\r\n' +
            "wallet_balance = circle.get_wallet_balance(wallet_address='wallet_address')\r\n" +
            'print("Wallet balance:", wallet_balance)\r\n' +
            'By following these steps, you can seamlessly create and interact with Programmable Wallets using Circle’s API or SDK. This empowers developers to build innovative blockchain applications with ease, leveraging the benefits of USDC and Circle’s Web3 Services to scale real-world solutions.\r\n' +
            '\r\n' +
            'In conclusion, Circle’s Web3 Services and Programmable Wallets represent a paradigm shift in blockchain technology, offering a gateway to unprecedented innovation and scalability. By empowering developers with the tools to create custom solutions tailored to specific use cases, Circle is driving forward the evolution of decentralized finance. As businesses and individuals increasingly recognize the potential of blockchain technology, the role of programmable wallets will continue to expand, enabling a new era of interoperable, efficient, and secure financial transactions. With Circle at the forefront of this transformative journey, the future of decentralized finance looks brighter than ever before.'
    },
    {
        id: 9,
        updated: false,
        title: 'Aptos: A Strong Contender in the dApp Arena',
        summary: 'Aptos, a blockchain platform founded by ex-Facebook employees, offers unmatched scalability and security for dApp development, making it a compelling choice for creating innovative solutions like a micropayments platform for the creator economy.',
        author: 'Sanjay75000',
        date: 'March 20, 2024',
        content: 'Aptos has emerged as a serious contender in the dApp development landscape. Founded by ex-Facebook employees with experience in Libra, Aptos aims to address the scalability and security challenges that have plagued some existing blockchains. Here’s a deeper dive into what makes Aptos attractive for building dApps:\r\n' +
            '\r\n' +
            'Why Develop on Aptos?\r\n' +
            '\r\n' +
            'Unmatched Scalability: Unlike traditional blockchains that process transactions sequentially, Aptos leverages a parallel execution approach. This allows for significantly faster transaction processing, potentially exceeding 150,000 transactions per second (TPS). This high throughput is ideal for dApps anticipating high user volumes and frequent interactions.\r\n' +
            'Security Built-in: Security is paramount for any blockchain platform. Aptos employs a Byzantine Fault Tolerant (BFT) consensus mechanism. BFT ensures that even in the face of some validator failures, the network can reach agreement on the state of the ledger, preventing malicious actors from disrupting operations. Additionally, Aptos utilizes the Move programming language. Move is specifically designed for writing secure smart contracts. Its static verification system helps identify potential vulnerabilities before deployment, minimizing the risk of exploits.\r\n' +
            'Future-Proof Design: Aptos is built with modularity in mind. This allows for easier upgrades and integration of new features as the blockchain ecosystem evolves. Developers don’t have to worry about their dApps becoming obsolete due to limitations in the underlying platform.\r\n' +
            'Developer-Friendly Environment: Move simplifies smart contract development compared to languages like Solidity. Move offers better resource management and a focus on safety, making it easier for developers to write secure and efficient dApps.\r\n' +
            'Building on Aptos: A Novel dApp Idea\r\n' +
            '\r\n' +
            'Let’s explore a dApp concept that capitalizes on Aptos’ unique strengths:\r\n' +
            '\r\n' +
            'Micropayments Platform for the Creator Economy:\r\n' +
            '\r\n' +
            'The creator economy thrives on microtransactions, rewarding content creators for individual pieces of content.\r\n' +
            'Existing solutions often struggle with high transaction fees, hindering the viability of micropayments.\r\n' +
            'Aptos’ scalability can enable a micropayments platform that facilitates seamless, low-cost transactions for content creators and consumers.\r\n' +
            'Move’s secure smart contracts can automate royalty distribution and ensure fair compensation for creators.\r\n' +
            'This dApp idea goes beyond simply replicating existing DEXes. It leverages Aptos’ ability to handle a massive volume of microtransactions efficiently, fostering a new paradigm within the creator economy.\r\n' +
            '\r\n' +
            'Comprehensiveness and Clarity: This write-up expands on each section: Introduction (What Aptos is), Reasons to Choose (Why Aptos), and dApp Idea (Building on Aptos). The language avoids technical jargon while maintaining informative detail.\r\n' +
            '\r\n' +
            'dApp Idea Analysis\r\n' +
            'The micropayments platform concept is a strong example of how Aptos can empower innovative dApps. By addressing the challenge of microtransaction fees, it unlocks new possibilities within the creator economy. While similar platforms exist, Aptos’ focus on scalability and security positions this dApp to potentially offer a more efficient and trustworthy solution.\r\n' +
            '\r\n' +
            'In conclusion, Aptos presents a compelling option for developers seeking to build secure, scalable, and future-proof dApps. Its unique features and developer-friendly environment position it as a strong contender in the growing blockchain landscape. With innovative dApp concepts like the micropayments platform, Aptos has the potential to revolutionize various industries.'
    },
    {
        id: 10,
        updated: false,
        title: 'Coding Chronicles: An Odyssey of Learning, Inspiration, and the Joy of Sharing as a Software Developer',
        summary: "A Dev's Journey into the Enchanting Realms of Code, Motivation, and Knowledge Exchange",
        author: 'Sagnik Das',
        date: 'July 13, 2023',
        content: "Programming is not about what you know; it's about what you can figure out\r\n" +
            '\r\n' +
            "Here I am, in the inaugural blog post of my coding journey. As I sit down to pour my thoughts onto the digital canvas, I am filled with excitement and a sense of purpose. This isn't my first attempt at blogging, but it's the first time I feel motivated and inspired to share my experiences. If you're reading this, then I've succeeded, and I extend my congratulations to myself.\r\n" +
            '\r\n' +
            "Allow me to introduce myself. I'm Sagnik Das, a final-year student at the National Institute of Technology, Patna, pursuing my B.Tech. degree in Electronics and Communication Engineering. Despite being from a different branch, I've harboured a fascination for coding\r\n" +
            '\r\n' +
            'Common nowadays? Following the trend?\r\n' +
            '\r\n' +
            'It all began when I was introduced to the basics of Java in classes 9 and 10. I was captivated by how a few lines of code could solve problems and bring ideas to life. Thus, here I am—an aspiring software developer, eager to explore and unleash my potential in the tech world.\r\n' +
            '\r\n' +
            "While I may be a newbie in this domain, I've accumulated some valuable experiences so far, which I'm thrilled to share. I've also come to realize that continuous learning and documenting my discoveries can propel my growth as a developer. Taking this advice to heart, I've decided to chronicle my learnings and insights as I progress on this exciting journey.\r\n" +
            '\r\n' +
            'Building Bridges to Success: Exploring the Path Ahead and Why You Should Join Me\r\n' +
            "Discovering the World of Software Development: I'll recount the story of how I stumbled upon the captivating world of software development. Whether it was a childhood fascination, an inspiring encounter, or a serendipitous moment, I'll take you through the events that sparked my curiosity and set me on this incredible path.\r\n" +
            '\r\n' +
            "Overcoming Challenges and Embracing Growth: No journey is without its challenges, and my path as a software developer has been no exception. I'll also delve into the challenges I've faced and how I've embraced them to fuel my growth. From moments of self-doubt to navigating obstacles, I'll share my strategies for overcoming hurdles and finding inspiration in the face of adversity.\r\n" +
            '\r\n' +
            "Lessons Learned and Milestones Achieved: Throughout my journey, I've gleaned valuable lessons and achieved significant milestones. I'll share these insights, drawing from coding projects, collaborations, and even the occasional failure. These experiences have not only honed my technical skills but also shaped my problem-solving approach, teamwork abilities, and personal growth. Additionally, I'll provide recommendations for learning materials that have greatly enriched my journey.\r\n" +
            '\r\n' +
            "As I conclude this first blog post, I extend my gratitude to the opportunities, experiences, and individuals who have influenced my path thus far. Looking ahead, I invite you to join me in future blog posts where I'll dive deeper into various topics, sharing more insights, discoveries, and the ongoing development of a software developer.\r\n" +
            '\r\n' +
            "Together, let's embark on this enchanting odyssey of code, motivation, and the joy of sharing knowledge. Stay tuned for more exciting adventures to come!"
    },
];

export { blogsData };